Options:
	P: <grey>[<brown>HorseNerfs<grey>]&r

Variables:
	{Horse::Riding}=true
	{Horse::Healing}=true
	{Horse::Spawns}=true
	{Horse::HealthNerf}=false
	
command /horse <text> <text>:
	permission: skript.op
	usage : <healing/riding/healthnerf/feature on/off/list>
	trigger:
		if arg 1 is "healing":
			if arg 2 is "enable" or "true" or "on":
				if {Horse::Healing} is false:
					set {Horse::Healing} to true
					broadcast "{@P} Horse Healing is now enabled!"
				else:
					message "{@P} Horse Healing is already enabled!"
			else if arg 2 is "disable" or "false" or "off":
				if {Horse::Healing} is true:
					set {Horse::Healing} to false
					broadcast "{@P} Horse Healing is now disabled!"
				else:
					message "{@P} Horse Healing is already disabled!"
		else if arg 1 is "riding" or "mounting":
			if arg 2 is "enable" or "true" or "on":
				if {Horse::Riding} is false:
					set {Horse::Riding} to true
					broadcast "{@P} Horse Riding is now enabled!"
				else:
					message "{@P} Horse Riding is already enabled!"
			else if arg 2 is "disable" or "false" or "off":
				if {Horse::Riding} is true:
					set {Horse::Riding} to false
					broadcast "{@P} Horse Riding is now disabled!"
				else:
					message "{@P} Horse Riding is already disabled!"
		else if arg 1 is "health" or "healthnerf":
			if arg 2 is "enable" or "true" or "on":
				if {Horse::HealthNerf} is false:
					set {Horse::HealthNerf} to true
					broadcast "{@P} Horses' Health is now nerfed!"
					loop all horses:
						set {_health} to a random integer between 4 and 7
						set the loop-horse's max health to {_health}
						set the loop-horse's health to {_health}
				else:
					message "{@P} Horses' Health is already nerfed!"
			else if arg 2 is "disable" or "false" or "off":
				if {Horse::HealthNerf} is true:
					set {Horse::HealthNerf} to false
					broadcast "{@P} Horses' Health is now not nerfed!"
				else:
					message "{@P} Horses' Health is already not nerfed!"
		else if arg 1 is "features" or "nerfs":
			if arg 2 is "list":
				message "{@P} Horse Spawns are %{Horse::Spawns}%"
				message "{@P} Horse Riding is %{Horse::Riding}%"
				message "{@P} Horse Healing is %{Horse::Healing}%"
				message "{@P} Horse Health Nerfs is %{Horse::HealthNerf}%"
			if arg 2 is "reset":
				set {Horse::Spawns} to true
				set {Horse::Riding} to true
				set {Horse::Healing} to true
				set {Horse::HealthNerf} to false
				broadcast "{@P} Horses are now vanilla!"
		else if arg 1 is "spawn" or "spawns":
			if arg 2 is "enable" or "true" or "on":
				if {Horse::Spawns} is false:
					set {Horse::Spawns} to true
					broadcast "{@P} Horse Spawns are now enabled!"
				else:
					message "{@P} Horse Spawns are already enabled!"
			else if arg 2 is "disable" or "false" or "off":
				if {Horse::Spawns} is true:
					set {Horse::Spawns} to false
					broadcast "{@P} Horse Spawns are now disabled!"
					loop all horses:
						kill loop-horse
				else:
					message "{@P} Horse Spawns are already disabled!"

				
on right click on horse:
	if {Horse::Healing} is false:
		player is holding sugar or an apple or wheat or a golden carrot or a golden apple or a hay bale
		cancel the event
		message "{@P} Horse Healing is disabled!" to event-player
	
on right click on horse:
	if {Horse::Riding} is false:
		cancel the event
		message "{@P} Horse riding is disabled!" to event-player
	
on spawn of horse:
	if {Horse::HealthNerf} is true:
		set {_health} to a random integer between 4 and 7
		set the horse's max health to {_health}
		set the horse's health to {_health}

on spawn of horse:
	if {Horse::Spawns} is false:
		cancel the event
